import React from 'react';
import './App.css';
//function declaration, будем работать с 2 типами функций: стрелочная функция, и function declaration
//Компонента - Функция, которая объявлена с большой буквы и возвращают JSX разметку — это HTML подобный JS.
function App() {
    //делает полезное что-то
    return (
        //обязана вернуть JSX
        <div>
            {/*This is App component*/}
            <Apptatle/>
            <Rating/>
            <Accordion/>
        </div>
    );
 // Функция App вызовет Apptatle ==>Rating ==> Accordion, чтобы на их место вставить то, что они возвращают,
//склеивает и отрисовывает полученный JSX в разметку в браузере - все компоненты отработали, каждая из них вернула свою разметку, и вся разметка склеилась.
//Можем вернуть из функции только одни JSX элемент, интерес функций возвращать именно группу элементов,
// поэтому эту группу надо обернуть в какого-нибудь родителя и возвращать один корневой элемент с вложенностью любого размера
// Command + Alt + L = отформатировать выделенный код (регулярно делать, для лучшей читаемости)
//React – это компоненты, компоненты — это какие-то функции, которые мы создаем сами, каждая такая функция
// обязана быть написана с большой буквы и обязана возвращать JSX разметку.
//Любое приложение, как правило, начинается с отрисовки App, а внутри App делаем какую-то комбинацию из своих компонент,
// которые мы сами разрабатываем и по итогу каждая компонента рисует кукую-то разметку.
    function Accordion() {
        console.log("Accordion rendering")
        return <div>
            <AccordionTitle/>
            <AccordionBody/>
        </div>
    }
    function AccordionTitle() {
        console.log("AccordionTitle rendering")
        return <h3>Menu</h3>
    }
    function AccordionBody() {
        console.log("AccordionBody rendering")
        return <ul>
            <li>1</li>
            <li>2</li>
            <li>3</li>
        </ul>
    }
    function Rating() {
        return (
            <div>
                <Star/>
                <Star/>
                <Star/>
                <Star/>
            </div>
        )
    }
    function Apptatle() {
        return (
            <> This is App component</>    //   Reakt фрагмент - не является HTML элементом, но является JSX элементом и
// может быть контейнером (оберткой) над другими элементами
        )
    }
    function Star() {
        console.log("star rendering") //добавляя console.log в console браузера можно увидеть что программа отработала
        return <>
            <div>Star</div>
        </>
    }
//Компонента позволяет:
// 1. дробить приложение на небольшие осмысленные семантические/структурные блоки – компоненты (код становится не громоздкий, если надо анализировать какую-то определённую компоненту можно перейти на нее)
// 2. То, что мы инкапсулировали/скрыли в компоненте можем использовать еще много раз в коде достаточно вставить компоненту в любое необходимое место),
// компоненту мы можем вставлять сколько угодно раз, и она будет отрисовывать разметку
// App – входная точка, самая главная компонента, самая высокоуровневая, анализируя ее
// можно понять что и в какой последовательности будет выводиться в браузер
//В Reakt есть фрагмент элемент который не является HTML элементом, но является JSX элементом и может быть контейнером (оберткой)
// над другими элементами – выглядит как пустой тег <>…</>.
// Формально возвращаем JSX элемент, который не превратится разметку. (<div> даже без стилей может навредить разметке).
// Когда компонента отрисовывается много раз в большом количестве кода, дебажить такой код неудобно т.к будет слишком много остановок кода,
// вместо debugger можно писать console.log("Rating rendering") с любым текстом, а в console браузера можно увидеть, что программа отработала
// и сколько раз обращалась данная компоненте по количеству выведенных в console.log информации 
//В console можно отследить последовательность rendering, что кого вызывает и в какой последовательности отрисовывается.
//Вложенность – это принципиально, какая функция какой по счет вызывается.
// Последовательность рендоров – кто кого вызывает и в какой последовательности отрисовывается, важно понимать и видеть это.
//Что бы отрисовалось App нужно чтобы отрисовались вложенные в нее дочерние компоненты.
//Компонента — это функция, но не мы ее не вызывыаем как обычные функции, ее вызывает React, чтобы получить от них JSX и отрисовать.

//В любом языке программирования функции нужны чтобы их вызывать, сначала мы функцию определяем т.е записываем, а потом что бы функция начала работать ее нужно запустить (вызвать).
//В браузере будет что-то происходить только тогда, КОГДА ФУНКЦИЯ БУДЕТ ВЫЗВАНА
// Если функции или переменные подсвечиваются блекло-серым цветом – это сигнализирует, что они не используются их никто не вызывает.

    function hello() {                              //Функция определена
        debugger                                    // debugger - Специальная команда для программиста, которая работает при открытой консоли в браузере и останавливает программу если программа окажется в этом месте.
        // Дебажить программу – это значит отлаживать, выполнять ее по шагам, шаг за шагом.
        alert("Hello IT-INCUBATOR")
    }
    hello();   //Запускаем функцию
}
export default App;
